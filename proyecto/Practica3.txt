Autor: Alejandro Fernández García
Login: alejandro.fernandez
##################################################################
Analizador de clases JAVA que genera un diagrama de clases en Dia.
##################################################################

-----------------
Precondiciones: -
-----------------
	- Las clases deben ser compilables.
	- No pueden < y >, por lo tanto no se podrían usar los generics de java.
	- Tampoco anotaciones con @
	- Cada clase debe ir en un fichero.
	- Los métodos pueden llevar cosas dentro, siempre y cuando no sean llaves.


---------
Reconoce-
---------

Reconoce lo especificado en la propuesta.
- [public | private | protected | default] [abstract] [interface | class] XXX [implements | extends] YYY
- [public | private | protected | default] [Integer | String | ...] atributo1
- [public | private | protected | default] [Integer | String | Void | ...] metodo1 (param1, param2)

Reconoce alguna cosa a mayores para gestion de errores como por ejemplo los constructores.

--------------------
Gestión de errores -
--------------------

Como ya se comentó en la propuesta y en el seguimiento, resulta dificil 
pensar que "errores" gestionar debido a que se supone que el código de 
las clases debería estar correctamente  ya que es compilable. Por lo 
tanto, los errores que gestiono serían acotaciones o restricciones que 
le he impuesto al lenguaje, son todas a nivel sintáctico y serían los 
siguientes:
	- El orden del contenido de una clase debe ser: primero atributos y 
		luego métodos.
	- No se admiten constructores.
	- Implements o extends no pueden aparecer los dos a la vez.
	- Implements solo puede llevar como parametro 1 clase.
	- Extends solo puede llevar como parametro 1 clase.

No se si faltaría alguno pero esos son los errores básicos que getiono 
en la gramática.


----------------
Funcionamiento -
----------------

Para que sea fácil y rapido de ejecutar he puesto un Makefile con las siguientes ordenes:
	- make -> compila
	- make run -> compila y ejecuta
	- make testN -> compila y ejecuta el test N
	- make clean -> limpia el directorio base
	
En total he puesto 8 ejemplos:
	- Del 1 al 3, 8: Ejemplos de un correcto funcionamiento.
	- Del 4 al 7: Ejemplos de tratamiento de errores.


Si se realiza una ejecución normal el programa pedirá:
	- El directorio donde buscar las clases JAVA.
	- El nombre del fichero DIA que será el resultado de la ejecución.
	- El directorio donde se va a guardar el resultado.
	

------------------------
Explicación del código -
------------------------

He comentado el código en algunas partes que me parecian confusas para aclararlo y que 
sea de fácil y rápida comprensión.
Los pasos que realiza la practica en una ejecución son los siguientes:
	1.- Pide los datos por teclado.
	2.- Busca todas las clases JAVA en el directorio previamente introducido.
	3.- Para cada clase llama a yyparse()
		3.1.- Al llamar a yyparse se va recorriendo la gramática que va añadiendo elementos
				a las estructuras que almacenas parámetros, métodos y atributos. También busca y 
				almacena las relaciones existentes.
		3.2.- Se engloban todos estos XML intermedios en un XML que contiene toda la información 
				de la clase.
	4.- Una vez finalizada de parsear la clase, se generan XML intermedios, uno para los 
		parámetros otro para los métodos y otro para los atributos. Se generan a partir de unas 
		plantillas que contienen la estructura básica de todos los elementos.
	5.- Se repite 3 y 4 hasta que ya no quedan más clases que parsear.
	6.- Finalizado el analisis de todas las clases se crea el XML de las relaciones (flechas).
	7.- Se añade todo a un contenedor (layer) y por último a la estructura básica del DIA.


NOTA: Se utiliza la función system que permite ejecutar comandos del sistema operativo, en este 
		caso la use para crear y borrar la carpeta temporal donde iran los XML temporales. 
		No creo que de algún problema con algun tipo de linux.




